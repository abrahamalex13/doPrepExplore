setwd("..")
install("doPrepExplore")
library(devtools)
devtools::install("doPrepExplore")
setwd("..")
install("doPrepExplore")
library(devtools); library(roxygen2); install("doPrepExplore")
setwd("..")
devtools::install("doPrepExplore")
setwd("..")
devtools::install("doPrepExplore")
install.packages("tidyverse")
install.packages("devtools")
devtools::install("doPrepExplore")
.libPaths()
install.packages("backports")
install.packages("backports")
devtools::install("doPrepExplore")
devtools::install("doPrepExplore")
install.packages("backports")
devtools::install("doPrepExplore")
setwd("..")
devtools::install("doPrepExplore")
install.packages("backport")
devtools::install("doPrepExplore")
setwd("..")
devtools::install("doPrepExplore")
install.packages("backports")
writeLines('PATH="$C:\\rtools40\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.getenv("PATH")
Sys.getenv("PATH")
writeLines('PATH="$C:\\rtools40\\usr\\bin;$C:\\Program Files\\R\\R-4.0.2\\bin\\x64;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\iCLS\\;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\iCLS\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Users\\Alex\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\Alex\\AppData\\Local\\Programs\\MiKTeX 2.9\\miktex\\bin\\x64\\;"', con = "~/.Renviron")
Sys.which("make")
setwd("..")
devtools::install("doPrepExplore")
devtools::install()
devtools::install()
devtools::install()
devtools::install()
?dplyr::across
devtools::install()
devtools::install()
impute_group_mean <- function(df, varnames_impute, varnames_grp, pre_df_means = NULL) {
if (is.null(pre_df_means)) {
#construct by-group means df ---------
varnames_grp.syms <- rlang::syms(varnames_grp)
df_means <- df %>%
group_by(!!!varnames_grp.syms) %>%
dplyr::summarize(
across(varnames_impute,
.fns = list("mean" = mean(.x, na.rm = T), "n" = sum(!is.na(.x))),
.names = "{.col}_{.fn}"))
# dplyr::summarize_at(varnames_impute,
#                     .funs = funs("mean" = mean(., na.rm = TRUE),
#                                  "n" = sum(!is.na(.))))
#summarize_at auto-renames mean-calculation variables
#if more than one is specified.
# if (length(varnames_impute) == 1) {
#
#   varname_impute <- varnames_impute
#   varname_impute.sym <- rlang::sym(varnames_impute)
#
#   varname_impute_suffix <- paste(varname_impute, "_mean", sep = "")
#   varname_impute_suffix.sym <- rlang::sym(varname_impute_suffix)
#
#   df_means <- df_means %>%
#     rename(!!varname_impute_suffix.sym := !!varname_impute.sym)
#
# }
# -----
} else df_means <- pre_df_means
#populate missing values ----
df <- left_join(df, df_means)
M <- is.na(df[, varnames_impute])
for (varname_i in varnames_impute) {
varname_mean_i <- paste(varname_i, "_mean", sep = "")
df[M[, varname_i], varname_i] <- df[M[, varname_i], varname_mean_i]
}
df <- df %>%
dplyr::select(-ends_with(c("_mean", "_n")))
# ----
if (is.null(pre_df_means)) out <- list("df_means" = df_means, "M" = M, "df_impute" = df)
else out <- list("M" = M, "df_impute" = df)
return(out)
}
impute_group_mean <- function(df, varnames_impute, varnames_grp, pre_df_means = NULL) {
if (is.null(pre_df_means)) {
#construct by-group means df ---------
varnames_grp.syms <- rlang::syms(varnames_grp)
df_means <- df %>%
group_by(!!!varnames_grp.syms) %>%
dplyr::summarize(
across(varnames_impute,
.fns = list("mean" = ~ mean(.x, na.rm = T), "n" = ~ sum(!is.na(.x))),
.names = "{.col}_{.fn}"))
# dplyr::summarize_at(varnames_impute,
#                     .funs = funs("mean" = mean(., na.rm = TRUE),
#                                  "n" = sum(!is.na(.))))
#summarize_at auto-renames mean-calculation variables
#if more than one is specified.
# if (length(varnames_impute) == 1) {
#
#   varname_impute <- varnames_impute
#   varname_impute.sym <- rlang::sym(varnames_impute)
#
#   varname_impute_suffix <- paste(varname_impute, "_mean", sep = "")
#   varname_impute_suffix.sym <- rlang::sym(varname_impute_suffix)
#
#   df_means <- df_means %>%
#     rename(!!varname_impute_suffix.sym := !!varname_impute.sym)
#
# }
# -----
} else df_means <- pre_df_means
#populate missing values ----
df <- left_join(df, df_means)
M <- is.na(df[, varnames_impute])
for (varname_i in varnames_impute) {
varname_mean_i <- paste(varname_i, "_mean", sep = "")
df[M[, varname_i], varname_i] <- df[M[, varname_i], varname_mean_i]
}
df <- df %>%
dplyr::select(-ends_with(c("_mean", "_n")))
# ----
if (is.null(pre_df_means)) out <- list("df_means" = df_means, "M" = M, "df_impute" = df)
else out <- list("M" = M, "df_impute" = df)
return(out)
}
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
help("mgcv-parallel")
library(mgcv)
help("mgcv-parallel")
devtools::install()
install.packages("devtools")
devtools::install()
install.packages("devtools")
devtools::install()
